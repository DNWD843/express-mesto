{"version":3,"sources":["images/headerLogo.svg","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/ImagePopup.js","utils/api.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/DeleteConfirmPopup.js","components/App.js","index.js"],"names":["module","exports","Header","className","src","headerLogoPath","alt","CurrentUserContext","React","createContext","Card","id","link","title","likesQuantity","owner","likes","onCardClick","onCardLike","onCardDelete","currentUser","useContext","isOwn","_id","isLiked","some","likeOwner","onClick","name","type","value","Main","props","key","onEditAvatar","style","backgroundImage","avatar","onEditProfile","about","onAddPlace","cards","map","card","Footer","ImagePopup","onOverlayClick","isOpen","onClose","api","URLs","headers","token","this","_baseURL","baseURL","_cardsURL","cardsURL","_userURL","userURL","_likesURL","likesURL","_avatarURL","avatarURL","_headers","_token","fetch","authorization","then","res","ok","json","Promise","reject","status","item","method","body","JSON","stringify","cardId","likeStatus","PopupWithForm","onSubmit","children","disabled","isReadyToSubmit","submitButtonText","isLoading","preloaderText","EditProfilePopup","editProfileForm","useFormik","initialValues","description","validationSchema","Yup","min","max","required","onUpdateUser","values","useEffect","setValues","handleSubmit","isValid","onChange","handleChange","onBlur","handleBlur","placeholder","touched","errors","EditAvatarPopup","editAvatarForm","url","onUpdateAvatar","resetForm","Boolean","AddPlacePopup","addPlaceForm","DeleteConfirmPopup","isProcessing","App","closeAllPopups","document","removeEventListener","handleEscClose","setState","isEditProfilePopupOpen","isAddPlacePopupOpen","isEditAvatarPopupOpen","isDeleteConfirmPopupOpen","isImagePopupOpen","selectedCard","undefined","evt","handleClickOnOverlay","target","currentTarget","handleCardLike","state","changeLikeCardStatus","newCard","newCards","cardsItem","length","catch","err","console","log","handleCardClick","addEventListener","handleCardDelete","handleDeleteConfirm","preventDefault","isDeleteProcessing","deleteCard","filter","finally","handleEditAvatarClick","activeElement","blur","handleUpdateAvatar","isNewAvatarLoading","editAvatar","handleEditProfileClick","handleUpdateUser","isNewProfileLoading","editProfile","handleAddPlaceClick","handleAddPlaceSubmit","isNewCardLoading","addNewCard","obtainedCard","resultCardsArr","concat","all","loadUserData","loadCards","currentUserData","initialCardsData","initialCards","initialCard","Provider","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.00d5414c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headerLogo.c6f11019.svg\";","import React from 'react';\r\nimport headerLogoPath from '../images/headerLogo.svg';\r\n\r\n/**\r\n * @module Header\r\n * @description Функциональный React-компонент Header<br>\r\n * Возвращает JSX-фрагмент разметки - \"шапку\" страницы приложения\r\n * @returns {JSX} - JSX-фрагмент разметки, блок Header\r\n * @since v.2.0.0\r\n */\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header page__header\">\r\n      <img className=\"header__logo\" src={ headerLogoPath } alt=\"логотип проекта 'Место-Россия'\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n/**\r\n * @constant CurrentUserContext \r\n * @type {Object}\r\n * @description - глобальный стейт, контекст текущего пользователя - объект с данными о текущем пользователе\r\n */\r\nexport const CurrentUserContext = React.createContext({});","import React from 'react';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\n\r\n/**\r\n * @module Card\r\n * @description Функциональный React-компонент<br>\r\n * Декларирует отрисовку карточки<br>\r\n * Принимает объект параметров - props<br>\r\n * Возвращает JSX-фрагмент разметки - карточку, заполненный данными карточки<br>\r\n * @param {Object} props - объект с параметрами и переданными функциями-коллбэками\r\n * @param {String} props.id - уникальный идентификатор карточки, присваивается карточке сервером.<br>\r\n * <b>ПРИМЕЧАНИЕ: props.id используется при отрисовке компонента Card для присвоения обязательному параметру key</b>\r\n * @param {String} props.link - ссылка на изображение\r\n * @param {String} props.title - название изображения\r\n * @param {Number} props.likesQuantity - количество лайков\r\n * @param {Object} props.owner - объект, данные о владельце карточки\r\n * @param {Array} props.likes - массив, содержит id всех пользователей, лайкнувших карточку\r\n * @param {Function} props.onCardClick - функция-колбэк, вызывается при клике по изображению карточки, \r\n * открывает попап с полноразмерным изображением карточки<br>\r\n * Принимает аргументом объект с названием карточки и ссылкой на изображение для дальнейшей передачи \r\n * этих параметров в ImagePopup\r\n * @param {Function} props.onCardLike -  функция-колбэк, вызывается при клике по \"лайку\" карточки,\r\n * ставит/снимает \"лайки\", принимает аргументом объект с id карточки и массивом лайков карточки\r\n * @param {Function} props.onCardDelete - функция-колбэк, вызывается при клике по иконке удаления карточки,\r\n * открывает попап подтверждения удаления, принимает аргументом объект с id карточки\r\n * @returns {JSX} - JSX-фрагмент разметки, элемент card\r\n * @since v.2.0.0\r\n */\r\nfunction Card({ id, link, title, likesQuantity, owner, likes, onCardClick, onCardLike, onCardDelete }) {\r\n\r\n  /**\r\n   * Контекст текущего пользователя\r\n   * @param {Object} currentUser - объект с актуальными данными текущего пользователя\r\n   * @property {String} currentUser._id - id пользователя\r\n   * @since v.2.0.2\r\n   * @ignore\r\n   */\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n\r\n  /**\r\n   * Определяем, являемся ли мы владельцем текущей карточки\r\n   * @since v.2.0.2\r\n   * @ignore\r\n   */\r\n  const isOwn = owner._id === currentUser._id;\r\n\r\n  /**\r\n   * Определяем, лайкали ли мы текущую карточку\r\n   * @since v.2.0.2\r\n   * @ignore\r\n   */\r\n  const isLiked = likes.some(likeOwner => likeOwner._id === currentUser._id);\r\n\r\n  /**\r\n   * @method handleImageClick\r\n   * @description Обработчик клика по изображению карточки, вызывает коллбэк props.onCardClick и передает ему данные карточки\r\n   * @argument {Object} object - объект с данными карточки, аргумент коллбэка props.onCardClick \r\n   * @param {String} object.link - ссылка на изображение кликнутой карточки\r\n   * @param {String} object.title - название кликнутой карточки\r\n   * @public\r\n   * @since v.2.0.0\r\n   */\r\n  const handleImageClick = () => {\r\n    onCardClick({ link, title });\r\n  };\r\n\r\n  /**\r\n   * @method handleLikeClick\r\n   * @description Обработчик клика по \"лайку\" карточки, вызывает коллбэк props.onCardLike и передает ему данные карточки\r\n   * @argument {Object} object - объект с данными карточки, аргумент коллбэка props.onCardLike\r\n   * @param {String} object.id - id лайкнутой карточки\r\n   * @param {String} object.likes - массив \"лайков\" лайкнутой карточки\r\n   * @public\r\n   * @since v.2.0.2\r\n   */\r\n  const handleLikeClick = () => { onCardLike({ id, likes }) };\r\n\r\n  /**\r\n   * @method handleDeleteClick\r\n   * @description Обработчик клика по иконке \"удалить\", вызывает коллбэк props.onCardDelete и передает ему id карточки\r\n   * @argument {Object} object - объект с данными удаляемой карточки, аргумент коллбэка props.onCardDelete\r\n   * @param {String} object.id - id удаляемой карточки\r\n   * @public\r\n   * @since v.2.0.2\r\n   */\r\n  const handleDeleteClick = () => { onCardDelete({ id }) };\r\n\r\n  return (\r\n    <li className=\"card\">\r\n      <img className=\"card__image\" onClick={ handleImageClick } src={ link } alt={ title } name=\"photo\" title=\"Открыть фото\" />\r\n      <button type=\"button\" onClick={ handleDeleteClick } className={ `button button_type_delete card__delete-button ${isOwn ? 'card__delete-button_enabled' : ''}` } name=\"delete-button\" value=\"delete\" title=\"Удалить фото\"></button>\r\n      <div className=\"card__description\">\r\n        <h2 className=\"card__title\">{ title }</h2>\r\n        <div className=\"card__like-info\">\r\n          <button type=\"button\" onClick={ handleLikeClick } className={ `button button_type_like card__like-button  ${isLiked ? 'button_like-status_checked' : 'button_like-status_not-checked'}` } name=\"like-button\" value=\"like\"></button>\r\n          <span className=\"card__like-counter\">{ likesQuantity }</span>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\nimport Card from './Card';\r\n\r\n/**\r\n * @module Main\r\n * @description Функциональный React-компонент<br>\r\n * Декларирует отрисовку основного контента приложения: профиль пользователя, карточки с изображениями<br>\r\n * В компонент Main импортируются:<br>\r\n *  - api - экземпляр класса Api <br>\r\n *  - Card - компонент Card<br>\r\n * Принимает объект параметров - props<br>\r\n * Возвращает JSX-фрагмент разметки основного контента приложения\r\n * @param {Object} props - объект с переданными функциями-коллбэками\r\n * @param {Function} props.onAddPlace - функция-коллбэк, вызывается при клике по кнопке \"Добавить фото\", открывает попап добавления карточки\r\n * @param {Function} props.onCardClick - функция-коллбэк, вызывается при клике по изображению карточки, открывает попап с полноразмерным изображением карточки<br>\r\n * <b>ПРИМЕЧАНИЕ</b> В компоненте Main не используется. Через пропсы компонента Main пробрасывается в компонент Card.\r\n * @param {Function} props.onEditAvatar - функция-коллбэк, вызывается при клике по аватару пользователя, открывает попап редактирования аватара пользователя\r\n * @param {Function} props.onEditProfile - функция-коллбэк, вызывается при клике по кнопке \"Редактировать профиль\", открывает попап редактирования профиля\r\n * @param {Function} props.onCardDelete - функция-коллбэк, вызывается при клике по иконке удаления карточки, открывает попап подтверждения удаления карточки\r\n * @param {Function} props.onCardLike - функция-коллбэк, вызывается при клике по \"лайку\" карточки, ставит или удаляет \"лайк\", в зависимости от его состояния\r\n * @param {Array} props.cards - массив объектов(карточек)\r\n * @returns {JSX} - JSX-фрагмент разметки, блок main\r\n * @see {@link Api}\r\n * @see {@link Card}\r\n * @since v.2.0.0\r\n */\r\nfunction Main(props) {\r\n \r\n  /**\r\n   * Контекст текущего пользователя\r\n   * @param {Object} currentUser - объект с актуальными данными текущего пользователя\r\n   * @property {String} currentUser.name - имя пользователя\r\n   * @property {String} currentUser.about - описание о пользователе\r\n   * @property {String} currentUser.avatar - ссылка на аватар пользователя\r\n   * @since v.2.0.2\r\n   * @ignore\r\n   */\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n    \r\n  return (\r\n    <main className=\"content page__content\">\r\n      <section className=\"user-profile content__user-profile\" key=\"user-profile\">\r\n        <button type=\"button\" onClick={ props.onEditAvatar } className=\"button  user-profile__avatar-button\" style={ { backgroundImage: `url(${currentUser.avatar})` } } name=\"edit-avatar-form-button\" id=\"edit-avatar-form-button\" value=\"Добавить аватар\" title=\"Изменить аватар\"></button>\r\n        <div className=\"user-profile__user-info\">\r\n          <h1 className=\"user-profile__user-name\">{ currentUser.name }</h1>\r\n          <button type=\"button\" onClick={ props.onEditProfile } className=\"button button_type_edit user-profile__edit-button\" name=\"edit-profile-form-button\" id=\"edit-profile-form-button\" value=\"Открыть форму\" title=\"Редактировать профиль\"></button>\r\n          <p className=\"user-profile__user-job\">{ currentUser.about }</p>\r\n        </div>\r\n        <button type=\"button\" onClick={ props.onAddPlace } className=\"button button_type_add user-profile__add-button\" name=\"add-photo-form-button\" id=\"add-photo-form-button\" value=\"Добавить фото\" title=\"Добавить фото\"></button>\r\n      </section>\r\n\r\n      <section className=\"photo content__photo\" key=\"photo-cards\">\r\n        <ul className=\"photo__cards\">\r\n          { props.cards.map(card =>\r\n            <Card\r\n              key={ card.id }\r\n              { ...card }\r\n              onCardClick={ props.onCardClick }\r\n              onCardLike={ props.onCardLike }\r\n              onCardDelete={ props.onCardDelete }\r\n            />)\r\n          }\r\n        </ul>\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\n/**\r\n * @module Footer\r\n * @description Функциональный React-компонент Footer<br>\r\n * Возвращает JSX-фрагмент разметки - \"подвал\" страницы приложения\r\n * @returns {JSX} - JSX-фрагмент разметки, блок Footer\r\n * @since v.2.0.0\r\n */\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <p className=\"footer__copyright\">&#169; 2020 Mesto Russia</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\n/**\r\n * @module ImagePopup\r\n * @description Функциональный React-компонент<br>\r\n * Открывает изображение карточки в полном размере<br>\r\n * Принимает объект параметров - props<br>\r\n * Возвращает JSX-фрагмент разметки - попап с полноразмерным изображением карточки<br>\r\n * @param {Object} props - объект с параметрами и переданными функциями-коллбэками\r\n * @param {Object} props.card - объект с данными карточки\r\n * @param {String} props.card.link - ссылка на изображение карточки\r\n * @param {String} props.card.title - название карточки\r\n * @param {Function} props.onClose - функция-коллбэк, вызывается при клике по иконке закрытия попапа, закрывает попап\r\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\r\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\r\n *  - true - попап открыт<br>\r\n *  - false - попап закрыт\r\n * @returns {JSX} - JSX-фрагмент разметки, попап с полноразмерным изображением карточки\r\n * @since v.2.0.0\r\n */\r\nfunction ImagePopup(props) {\r\n  return (\r\n    <div onClick={ props.onOverlayClick } className={ `popup page__overlay page__overlay_theme_dark popup_type_view-photo ${props.isOpen ? 'popup_opened' : ''}` } id=\"view\">\r\n      <div className=\"popup__container\">\r\n        <button type=\"button\" onClick={ props.onClose } className=\"button button_type_close popup__close-photo-button\" name=\"close-photo\" value=\"Закрыть фото\"></button>\r\n        <figure className=\"popup__photo-content\">\r\n          <img className=\"popup__place-image\" src={ `${props.card ? props.card.link : '#'}  ` } alt={ `${props.card ? props.card.title : 'изображение'}` } />\r\n          <figcaption className=\"popup__place-name\">{ `${props.card ? props.card.title : 'изображение'}` }</figcaption>\r\n        </figure>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImagePopup;\r\n","/**\r\n * @description  Класс Api <br>\r\n * Отвечает за отправку запросов на сервер и проверку полученных ответов\r\n * @param {Object} Object - принимает в конструктор объект { URLs, headers, token } \r\n * @param {Object} Object.URLs  - объект, содержащий адреса для отправки запросов\r\n * @param {String} Object.URLs.baseURL - базовый URL сервера\r\n * @param {String} Object.URLs.cardsURL - URL для получения/добавления карточек\r\n * @param {String} Object.URLs.userURL - URLдля получения/добавления данных пользователя\r\n * @param {String} Object.URLs.likesURL - URL для получения/добавления информации о \"лайках\"\r\n * @param {String} Object.URLs.avatarURL - URL для получения/добавления ссылки на аватар\r\n * @param {Object} Object.headers - объект, содержащий заголовки запросов\r\n * @param {String} Object.headers.authorization - код авторизации (токен)\r\n * @param {String} Object.token  - токен для доступа на сервер\r\n * @since v.1.0.0\r\n * @example\r\n * const api = new Api({\r\n * URLs: {\r\n *   baseURL: 'https://mesto...',\r\n *   cardsURL: 'https://mesto.../cards/',\r\n *   userURL: 'https://mesto.../users/me',\r\n *   likesURL: 'https://mesto.../cards/likes/',\r\n *   avatarURL: 'https://mesto.../users/me/avatar'\r\n * },\r\n * headers: {\r\n *   \"authorization\": '<Ваш код авторизации>'\r\n * },\r\n * token: '<Ваш токен>'\r\n * });\r\n */\r\nclass Api {\r\n  constructor({ URLs, headers, token }) {\r\n    this._baseURL = URLs.baseURL;\r\n    this._cardsURL = URLs.cardsURL;\r\n    this._userURL = URLs.userURL;\r\n    this._likesURL = URLs.likesURL;\r\n    this._avatarURL = URLs.avatarURL;\r\n    this._headers = headers;\r\n    this._token = token;\r\n  }\r\n\r\n  /**\r\n   * @description  Публичный метод<br>\r\n   * Загружает с сервера данные пользователя\r\n   * @public\r\n   * @returns {Promise} - возвращает промис с данными пользователя\r\n   * @since v.1.0.0\r\n   */\r\n  loadUserData() {\r\n    return fetch(this._userURL, {\r\n      headers: {\r\n        authorization: this._token\r\n      },\r\n    })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description  Публичный метод<br>\r\n   * Загружает элементы с сервера\r\n   * @public\r\n   * @returns {Promise} - возвращает промис с данными элементов, сохраненных на сервере\r\n   * @since v.1.0.0\r\n   */\r\n  loadCards() {\r\n    return fetch(this._cardsURL, {\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description Публичный метод<br>\r\n   * Сохраняет на сервер элемент, добавленный через Форму добавления нового элемента<br>\r\n   * Принимает аргументом объект item\r\n   * @public\r\n   * @param {Object} item  - объект с параметрами элемента\r\n   * @param {String} item.name - название элемента из инпута Формы добавления нового элемента\r\n   * @param {String} item.link - ссылка на изображение элемента из инпута Формы добавления нового элемента\r\n   * @returns {Promise} - возвращает промис, содержащий данные нового элемента, полученные от сервера\r\n   * @since v.1.0.0\r\n   * @example\r\n   * api.addNewCard({name: <название элемента>, link: <ссылка на изображение элемента>})\r\n   */\r\n  addNewCard(item) {\r\n    return fetch(this._cardsURL, {\r\n      method: 'POST',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        name: item.name,\r\n        link: item.link,\r\n      })\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject((`Ошибка: ${res.status}`));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description Публичный метод<br>\r\n   * Удаляет элемент с сервера<br>\r\n   * Принимает аргументом id удаляемого элемента\r\n   * @public\r\n   * @param {String} cardId  - id удаляемого элемента\r\n   * @returns {Promise} - возвращает промис с сообщением об успешном удалении элемента\r\n   * @since v.1.0.0\r\n   */\r\n  deleteCard(cardId) {\r\n    return fetch(`${this._cardsURL}${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: this._token,\r\n      }\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description Публичный метод<br>\r\n   * Редактирует данные в профиле пользователя на сервере<br>\r\n   * Принимает арументом объект с новыми данными пользователя, веденными через Форму редактирования профиля\r\n   * @public\r\n   * @param {Object} Object  - { name, about } - объект с новыми данными пользователя\r\n   * @param {String} Object.name - новое имя пользователя, введенное в Форму редактирования профиля\r\n   * @param {String} Object.about - новое описание пользователя, введенное в Форму редактирования профиля\r\n   * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\r\n   * @since v.1.0.0\r\n   * @example\r\n   * api.editProfile({ \r\n   *   name: <новое имя пользователя, введенное в инпут Формы редактирования профиля>, \r\n   *   job: <новое описание пользователя, введенное в инпут Формы редактирования профиля >\r\n   * });\r\n   */\r\n  editProfile({ name, about }) {\r\n    return fetch(`${this._userURL}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        name,\r\n        about\r\n      })\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @description Публичный метод<br>\r\n   * Изменяет статус кнопки \"лайк\" у карточки<br>\r\n   * Принимает аргументом id карточки, у которой произошло нажатие \"лайка\" и новое состояние \"лайка\"\r\n   * @public\r\n   * @param {String} id - id элемента, на котором произошло нажатие \"лайка\"\r\n   * @param {Boolean} likeStatus - новое состояние \"лайка\": если true - \"лайк\" поставлен, если false - \"лайк\" снят\r\n   * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\r\n   * @public\r\n   * @since v2.0.2\r\n   */\r\n  changeLikeCardStatus(id, likeStatus) {\r\n    return fetch(`${this._likesURL}${id}`, {\r\n      method: `${likeStatus ? 'PUT' : 'DELETE'}`,\r\n      headers: {\r\n        authorization: this._token,\r\n      }\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n  \r\n  /**\r\n   * @description Публичный метод<br>\r\n   * Сохраняет на сервер новую ссылку на аватар пользователя<br>\r\n   * Принимает аргументом ссылку на новый аватар пользователя, полученную из Формы редактирования аватара\r\n   * @public\r\n   * @param {String} avatar - новая ссылка на аватар пользователя, полученная из Формы редактирования аватара\r\n   * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\r\n   * @since v.1.0.0\r\n   */\r\n  editAvatar(avatar) {\r\n    return fetch(`${this._avatarURL}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: avatar,\r\n      })\r\n    })\r\n      .then((res) => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n      });\r\n  }\r\n}\r\n\r\n/**\r\n * @constant api\r\n * @description Экземпляр класса Api<br>\r\n * Экспортируется в компонент App\r\n * @memberof Api\r\n * @instance\r\n * @since v.2.0.0\r\n */\r\nconst api = new Api({\r\n  URLs: {\r\n    baseURL: 'https://mesto.nomoreparties.co/v1/cohort-14/',\r\n    cardsURL: 'https://mesto.nomoreparties.co/v1/cohort-14/cards/',\r\n    userURL: 'https://mesto.nomoreparties.co/v1/cohort-14/users/me/',\r\n    likesURL: 'https://mesto.nomoreparties.co/v1/cohort-14/cards/likes/',\r\n    avatarURL: 'https://mesto.nomoreparties.co/v1/cohort-14/users/me/avatar/'\r\n  },\r\n  headers: {\r\n    \"authorization\": '85abb6e6-ccb0-45c7-b6e8-4ffe1f5da546'\r\n  },\r\n  token: '85abb6e6-ccb0-45c7-b6e8-4ffe1f5da546'\r\n});\r\n\r\nexport default api;","import React from 'react';\r\n\r\n/**\r\n * @module PopupWithForm\r\n * @description Функциональный React-компонент<br>\r\n * Шаблонный компонент попапа<br>\r\n * По принятым параметрам props и JSX-фрагменту разметки с инпутами props.children создает попап с формой для каждой\r\n * конкретной задачи: редактирование профиля, редактирование аватара, добавление карточки, подтверждение удаления карточки<br>\r\n * Принимает объект параметров - props<br>\r\n * Возвращает JSX-фрагмент разметки - попап<br>\r\n * @param {Object} props - объект с параметрами и переданными функциями-коллбэками\r\n * @param {JSX} props.children - JSX-фрагмент, список инпутов попапа<br>\r\n * <b>ПРИМЕЧАНИЕ:</b> Может не указываться явно в пропсах, может быть указан JSX-фрагментом при декларировании отрисовки компонента\r\n * @param {String} props.name - название формы, вставляется в атрибут name тега form и в css-класс, уточняющий тип формы\r\n * @param {String} props.title - название попапа\r\n * @param {String} props.submitButtonText - текст, который будет отображаться на кнопке submit\r\n * @param {String} props.preloaderText - текст, отображаемый на кнопке сабмит во время загрузки, т.е. когда isLoading: true\r\n * @param {Funcion} props.onClose - функция-коллбэк, вызывается при клике по иконке закрытия попапа, закрывает попап\r\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею попапа, закрывает попап\r\n * @param {Function} props.onSubmit - функция-коллбэк, вызывается при сабмите формы попапа\r\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\r\n *  - true: попап отображается<br>\r\n *  - false: попап не отображается\r\n * @param {Boolean} props.isLoading - индикатор состояния загрузки новых данных на сервер:<br>\r\n *  - true - идет загрузка<br> -  false - нет загрузки\r\n * @param {Boolean} props.isReadyToSubmit - индикатор готовности формы к сабмиту, вычисляется по результатам валидации инпутов:<br> \r\n * true - форма готова к сабмиту, все поля валидны<br> \r\n * false - форма не готова к сабмиту, хотя бы одно из полей не валидно<br>\r\n * <b>ПРИМЕЧАНИЕ: </b>в попапе подтверждения удаления DeleteConfirmPopup нет формы, поэтому этот параметр принимается от DeleteConfirmPopup\r\n * в значении true по умолчанию <br>Since: v.2.0.5\r\n * @returns {JSX} - JSX-фрагмент разметки, попап\r\n * @since v.2.0.0\r\n */\r\nfunction PopupWithForm(props) {\r\n  return (\r\n    <div onClick={ props.onOverlayClick } className={ `popup page__overlay page__overlay_theme_light popup_type_${props.name} ${props.isOpen ? 'popup_opened' : ''}` } id={ props.name }>\r\n      <div className=\"popup__container\">\r\n        <button type=\"button\" onClick={ props.onClose } className=\"button button_type_close popup__close-button\" name=\"close-popup\"  value=\"Закрыть\"></button>\r\n        <form onSubmit={ props.onSubmit } className={ `form popup__form form_type_${props.name}` } name={ `${props.name}-form` } id={ `${props.name}-form` } >\r\n          <h2 className=\"form__title\">{ props.title }</h2>\r\n          { props.children }\r\n          <button type=\"submit\" disabled={ !props.isReadyToSubmit } className={ `button ${props.isReadyToSubmit ? 'button_type_submit' : 'button_type_submit-inactive'} form__submit-button` } name={ `${props.name}-button` } value={ props.submitButtonText }>{ props.isLoading ? props.preloaderText : props.submitButtonText }</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PopupWithForm;","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n/**\r\n * @module EditProfilePopup\r\n * @description Функциональный React-компонент<br>\r\n * Редактирует данные профиля пользователя<br>\r\n * Для успешного изменения профиля пользователь должен ввести валидные данные в поля \"Имя\" и \"О себе\"<br>\r\n * Принимает объект параметров props<br>\r\n * Возвращает JSX-фрагмент разметки попапа редактирования профиля пользователя<br>\r\n * <b>Начиная с версии 2.0.5</b> для создания и валидации формы попапа используются библиотеки Formik и Yup.\r\n * @param {Object} props - объект с параметрами\r\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\r\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\r\n * @param {Function} props.onUpdateUser -  функция-коллбэк, обновляет данные профиля пользователя \r\n * при успешном сабмите формы редактирования профиля\r\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\r\n *  - true - попап открыт<br>\r\n *  - false - попап закрыт\r\n * @param {Boolean} props.isLoading - индикатор состояния загрузки новых данных профиля пользователя, \r\n * управляет отображением прелоадера загрузки:<br>\r\n *  - true - идет загрузка, отображется текст-прелоадер на кнопке сабмит;<br>\r\n *  - false - нет загрузки, на кнопке сабмит дефолтный текст\r\n * @returns {JSX} - JSX-фрагмент разметки, попап редактирования профиля пользователя\r\n * @see {@link PopupWithForm}\r\n * @since v.2.0.2\r\n */\r\nfunction EditProfilePopup(props) {\r\n\r\n  /**\r\n   * Контекст текущего пользователя\r\n   * @param {Object} currentUser - объект с актуальными данными текущего пользователя\r\n   * @property {String} currentUser.name - имя пользователя\r\n   * @property {String} currentUser.about - описание о пользователе\r\n   * @since v.2.0.2\r\n   * @ignore\r\n   */\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n\r\n  /**\r\n   * Форма редактирования профиля. Создается и валидируется библиотеками Formik и Yup\r\n   * @since v.2.0.5 \r\n   * @ignore\r\n   */\r\n  const editProfileForm = useFormik({\r\n    initialValues: {\r\n      name: '',\r\n      description: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      name: Yup.string()\r\n        .min(3, 'Must be 3 characters or more')\r\n        .max(15, 'Must be 15 characters or less')\r\n        .required('Required'),\r\n      description: Yup.string()\r\n        .min(3, 'Must be 3 characters or more')\r\n        .max(35, 'Must be 35 characters or less')\r\n        .required('Required'),\r\n    }),\r\n    onSubmit: () => {\r\n      props.onUpdateUser({ name, about: description });\r\n    },\r\n  });\r\n\r\n  const { name, description } = editProfileForm.values;\r\n\r\n  /**\r\n   * При открытии попапа устанавливаем актуальные данные профиля пользователя в инпутах формы\r\n   * @ignore\r\n   */\r\n  React.useEffect(() => {\r\n    if (props.isOpen) {\r\n      editProfileForm.setValues({\r\n        name: currentUser.name,\r\n        description: currentUser.about\r\n      });\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [props.isOpen]);\r\n\r\n  return (\r\n    <PopupWithForm\r\n      name=\"edit-profile\"\r\n      title=\"Редактировать профиль\"\r\n      submitButtonText=\"Сохранить\"\r\n      isOpen={ props.isOpen }\r\n      onClose={ props.onClose }\r\n      onOverlayClick={ props.onOverlayClick }\r\n      onSubmit={ editProfileForm.handleSubmit }\r\n      isLoading={ props.isLoading }\r\n      preloaderText=\"Сохранение...\"\r\n      isReadyToSubmit={ editProfileForm.isValid }\r\n    >\r\n      <>\r\n        <ul className=\"form__inputs\">\r\n          <li className=\"form__field\">\r\n            <input\r\n              id=\"user-name-input\"\r\n              name=\"name\"\r\n              type=\"text\"\r\n              onChange={ editProfileForm.handleChange }\r\n              onBlur={ editProfileForm.handleBlur }\r\n              value={ name ? name : '' }\r\n              className=\"form__input form__input_type_name\"\r\n              placeholder=\"Имя\"\r\n            />\r\n            { editProfileForm.touched.name && editProfileForm.errors.name ? (<span className=\"form__input-error\" id=\"user-name-input-error\">{ editProfileForm.errors.name }</span>) : null }\r\n          </li>\r\n          <li className=\"form__field\">\r\n            <input\r\n              id=\"user-job-input\"\r\n              name=\"description\"\r\n              type=\"text\"\r\n              onChange={ editProfileForm.handleChange }\r\n              onBlur={ editProfileForm.handleBlur }\r\n              value={ description ? description : '' }\r\n              className=\"form__input form__input_type_job\"\r\n              placeholder=\"О себе\"\r\n            />\r\n            { editProfileForm.touched.description && editProfileForm.errors.description ? (<span className=\"form__input-error\" id=\"user-job-input-error\">{ editProfileForm.errors.description }</span>) : null }\r\n          </li>\r\n        </ul>\r\n      </>\r\n    </PopupWithForm>\r\n  );\r\n}\r\n\r\nexport default EditProfilePopup;\r\n","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n/**\r\n * @module EditAvatarPopup\r\n * @description Функциональный React-компонент<br>\r\n * Изменяет аватар пользователя.<br>\r\n * Для успешного изменения аватара пользователь должен ввести корректную ссылку (url-адрес) на новый аватар <br>\r\n * Принимает объект параметров props<br>\r\n * Возвращает JSX-фрагмент разметки попапа редактирования аватара пользователя<br>\r\n * <b>Начиная с версии 2.0.5</b> для создания и валидации формы попапа используются библиотеки Formik и Yup. \r\n * @param {Object} props - объект с параметрами\r\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\r\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\r\n * @param {Function} props.onUpdateAvatar -  функция-коллбэк, обновляет аватар пользователя при успешном сабмите формы изменения аватара\r\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\r\n *  - true - попап открыт<br>\r\n *  - false - попап закрыт\r\n * @param {Boolean} props.isLoading - индикатор состояния загрузки нового аватара пользователя, \r\n * управляет отображением прелоадера загрузки:<br>\r\n *  - true - идет загрузка, отображется текст-прелоадер на кнопке сабмит;<br>\r\n *  - false - нет загрузки, на кнопке сабмит дефолтный текст:\r\n * @returns {JSX} - JSX-фрагмент разметки, попап редактирования аватара пользователя\r\n * @see {@link PopupWithForm}\r\n * @since v.2.0.2\r\n */\r\nfunction EditAvatarPopup(props) {\r\n\r\n/** \r\n * Форма изменения аватара. Создается и валидируется библиотеками Formik и Yup\r\n * @since v.2.0.5\r\n * @ignore\r\n */\r\n  const editAvatarForm = useFormik({\r\n    initialValues: {\r\n      avatar: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      avatar: Yup.string()\r\n        .url('Invalid URL')\r\n        .required('Required'),\r\n    }),\r\n    onSubmit: () => {\r\n      props.onUpdateAvatar({ avatar });\r\n    },\r\n  });\r\n  \r\n  const { avatar } = editAvatarForm.values;\r\n\r\n  /**\r\n   * При закрытии попапа очищаем инпут формы и сбрасываем валидацию\r\n   * @ignore\r\n   */\r\n  React.useEffect(() => {\r\n    if (!props.isOpen) {\r\n      editAvatarForm.resetForm();\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [props.isOpen]);\r\n\r\n  return (\r\n    <PopupWithForm\r\n      name=\"edit-avatar\"\r\n      title=\"Обновить аватар\"\r\n      submitButtonText=\"Создать\"\r\n      isOpen={ props.isOpen }\r\n      onClose={ props.onClose }\r\n      onOverlayClick={ props.onOverlayClick }\r\n      onSubmit={ editAvatarForm.handleSubmit }\r\n      isLoading={ props.isLoading }\r\n      preloaderText=\"Сохранение...\"\r\n      isReadyToSubmit={ Boolean(avatar) && editAvatarForm.isValid }\r\n      children={\r\n        <ul className=\"form__inputs\">\r\n          <li className=\"form__field\">\r\n            <input\r\n              id=\"avatar-link-input\"\r\n              name=\"avatar\"\r\n              type=\"url\"\r\n              onChange={ editAvatarForm.handleChange }\r\n              onBlur={ editAvatarForm.handleBlur }\r\n              value={avatar ? avatar : ''}\r\n              className=\"form__input form__input_type_avatar-link\"\r\n              placeholder=\"Ссылка на картинку\"\r\n            />\r\n            {  editAvatarForm.errors.avatar ? (<span className=\"form__input-error\" id=\"avatar-link-input-error\">{ editAvatarForm.errors.avatar }</span>) : null }\r\n          </li>\r\n        </ul>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default EditAvatarPopup;","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n/**\r\n * @module AddPlacePopup\r\n * @description Функциональный React-компонент<br>\r\n * Добавляет карточку в приложение<br>\r\n * Для успешного добавления карточки пользователь должен ввести корректные данные: \r\n * название карточки (изображения) и ссылку (url-адрес) на изображение<br>\r\n * Принимает объект параметров props<br>\r\n * Возвращает JSX-фрагмент разметки попапа добавления карточки<br>\r\n * <b>Начиная с версии 2.0.5</b> для создания и валидации формы попапа используются библиотеки Formik и Yup.\r\n * @param {Object} props - объект параметров\r\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\r\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\r\n * @param {Function} props.onSubmit - функция-коллбэк, добавляет карточки в приложение при успешном сабмите формы добавления карточки\r\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\r\n *  - true - попап открыт<br>\r\n *  - false - попап закрыт\r\n * @param {Boolean} props.isLoading - индикатор состояния загрузки новой карточки, \r\n * управляет отображением прелоадера загрузки:<br>\r\n *  - true - идет загрузка, отображется текст-прелоадер на кнопке сабмит;<br>\r\n *  - false - нет загрузки, на кнопке сабмит дефолтный текст\r\n * @public\r\n * @see {@link PopupWithForm}\r\n * @since v.2.0.2\r\n */\r\nconst AddPlacePopup = (props) => {\r\n\r\n  /**\r\n   * Форма добавления карточки. Создается и валидируется библиотеками Formik и Yup.\r\n   * @since v.2.0.5\r\n   * @ignore\r\n   */\r\n  const addPlaceForm = useFormik({\r\n    initialValues: {\r\n      title: '',\r\n      link: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      title: Yup.string()\r\n        .min(3, 'Must be 3 characters or more')\r\n        .max(15, 'Must be 15 characters or less')\r\n        .required('Required'),\r\n      link: Yup.string()\r\n        .url('Invalid URL')\r\n        .required('Required'),\r\n    }),\r\n    onSubmit: (values) => {\r\n      props.onSubmit({ name: values.title, link });\r\n    },\r\n  });\r\n\r\n  const { title, link } = addPlaceForm.values;\r\n\r\n  /**\r\n   * После закрытия попапа сбрасываем значения полей формы и валидацию\r\n   * @ignore\r\n   */\r\n  React.useEffect(() => {\r\n    if (!props.isOpen) {\r\n      addPlaceForm.resetForm();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [props.isOpen]);\r\n     \r\n  return (\r\n    <PopupWithForm\r\n      name=\"add-photo\"\r\n      title=\"Новое место\"\r\n      submitButtonText=\"Создать\"\r\n      isOpen={ props.isOpen }\r\n      onClose={ props.onClose }\r\n      onOverlayClick={ props.onOverlayClick }\r\n      onSubmit={ addPlaceForm.handleSubmit }\r\n      isLoading={ props.isLoading }\r\n      preloaderText=\"Сохранение...\"\r\n      isReadyToSubmit={ Boolean(link) && Boolean(title) && addPlaceForm.isValid }\r\n    >\r\n      <ul className=\"form__inputs\">\r\n        <li className=\"form__field\">\r\n          <input\r\n            id=\"place-title-input\"\r\n            name=\"title\"\r\n            type=\"text\"\r\n            onChange={ addPlaceForm.handleChange }\r\n            onBlur={ addPlaceForm.handleBlur }\r\n            value={ title ? title : '' }\r\n            className=\"form__input form__input_type_place-title\"\r\n            placeholder=\"Название\"\r\n          />\r\n                       \r\n          { addPlaceForm.touched.title && addPlaceForm.errors.title ? (<span className=\"form__input-error\">{ addPlaceForm.errors.title }</span>) : null }\r\n        </li>\r\n        <li className=\"form__field\">\r\n          <input\r\n            id=\"image-link-input\"\r\n            name=\"link\"\r\n            type=\"url\"\r\n            onChange={ addPlaceForm.handleChange }\r\n            onBlur={ addPlaceForm.handleBlur }\r\n            value={ link ? link : '' }\r\n            className=\"form__input form__input_type_image-link\"\r\n            placeholder=\"Ссылка на картинку\" />\r\n          { addPlaceForm.touched.link && addPlaceForm.errors.link ? (<span className=\"form__input-error\">{ addPlaceForm.errors.link }</span>) : null }\r\n        </li>\r\n      </ul>\r\n    </PopupWithForm>\r\n  );\r\n}\r\n\r\nexport default AddPlacePopup;","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\n\r\n/**\r\n * @module DeleteConfirmPopup\r\n * @description Функциональный React-компонент<br>\r\n * Запрашивает подтверждение удаления карточки<br>\r\n * Принимает объект параметров props<br>\r\n * Возвращает JSX-фрагмент разметки попапа  подтверждения удаления карточки\r\n * @param {Object} props - объект параметров\r\n * @param {Function} props.onClose - функция-коллбэк, закрывает попап\r\n * @param {Function} props.onOverlayClick - функция-коллбэк, вызывается при клике по оверлею, закрывает попап\r\n * @param {Function} props.onSubmit - функция-коллбэк сабмита попапа, удаляет карточку \r\n * @param {Boolean} props.isOpen - индикатор состояния попапа, управляет его видимостью:<br>\r\n *  - true - попап открыт<br>\r\n *  - false - попап закрыт \r\n * @param {Boolean} props.isProcessing - индикатор статуса процесса удаления карточки: \r\n * true - карточка удаляется, false - ожидается подтверждение удаления карточки или отмена \r\n * @see {@link PopupWithForm}\r\n * @since v.2.0.4\r\n */\r\nfunction DeleteConfirmPopup(props) {\r\n  return (\r\n    <PopupWithForm\r\n      name=\"confirm\"\r\n      title=\"Вы уверены?\"\r\n      submitButtonText=\"Да\"\r\n      onClose={ props.onClose }\r\n      onOverlayClick={ props.onOverlayClick }\r\n      isOpen={ props.isOpen }\r\n      onSubmit={ props.onSubmit }\r\n      isLoading={ props.isProcessing }\r\n      preloaderText=\"Удаление...\"\r\n      isReadyToSubmit={ true }\r\n    />\r\n  );\r\n}\r\n\r\nexport default DeleteConfirmPopup;","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport ImagePopup from './ImagePopup';\nimport api from '../utils/api';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport DeleteConfirmPopup from './DeleteConfirmPopup';\n\n/**\n * @description Классовый React-компонент<br> \n * Главный компонент приложения<br>\n * Собирает все компоненты приложения и декларирует их отрисовку<br>\n * @returns {JSX} - JSX-разметка приложения\n * @since v.2.0.0\n */\nclass App extends React.Component {\n  constructor(props) {\n    super();\n\n    /**\n     * @description Объявление стейтов и установка их начальных значений\n     * @param {Object} state - объект со стейтами\n     * @param {Boolean} state.isEditProfilePopupOpen - стейт попапа редактирования профиля,\n     *  управляет видимостью попапа редактирования профиля. Начальное значение false - попап скрыт\n     * @param {Boolean} state.isAddPlacePopupOpen - стейт попапа добавления карточки, \n     * управляет видимостью попапа добавления карточки. Начальное значение false - попап скрыт\n     * @param {Boolean} state.isEditAvatarPopupOpen - стейт попапа редактирования аватара, \n     * управляет видимостью попапа редактирования аватара. Начальное значение false - попап скрыт\n     * @param {Boolean} state.isDeleteConfirmPopupOpen - стейт попапа подтверждения удаления карточки,\n     * управляет видимостью попапа подтверждения удаления карточки. Начальное значение false - попап скрыт\n     * @param {Boolean} state.isImagePopupOpen - стейт попапа с полноразмерным изображением,\n     * управляет видимостью попапа. Начальное значение false - попап скрыт\n     * @param {Object | undefined} state.selectedCard - стейт кликнутой карточки, \n     * Может иметь одно из двух значений: объект с данными карточки или undefined. \n     * Начальное значение undefined - карточка не определена\n     * @param {Object} state.currentUser - стейт, сохраняет объект с данными о текущем пользователе\n     * @param {Array} state.cards - стейт, содержит массив объектов с данными карточек\n     * @param {Boolean} state.isNewProfileLoading - стейт загрузки новых данных профиля пользователя: \n     * true - идет загрузка, false - нет загрузки\n     * @param {Boolean} state.isNewAvatarLoading - стейт загрузки нового аватара пользователя:\n     * true - идет загрузка, false - нет загрузки\n     * @param {Boolean} state.isNewCardLoading - стейт загрузки новой карточки: true - идет загрузка, false - нет загрузки\n     * @param {Boolean} state.isDeleteProcessing - стейт процесса удаления карточки: \n     * true - идет удаление, false - удаление не производится\n     * @this App\n     * @ignore\n     */\n    this.state = {\n      isEditProfilePopupOpen: false,\n      isAddPlacePopupOpen: false,\n      isEditAvatarPopupOpen: false,\n      isDeleteConfirmPopupOpen: false,\n      isImagePopupOpen: false,\n      selectedCard: undefined,\n      currentUser: {},\n      cards: [],\n      isNewProfileLoading: false,\n      isNewAvatarLoading: false,\n      isNewCardLoading: false,\n      isDeleteProcessing: false\n    };\n  }\n\n  /**\n   * @method  closeAllPopups\n   * @description Публичный метод<br>\n   * Стрелочная функция, закрывает все попапы, удаляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   */\n  closeAllPopups = () => {\n    document.removeEventListener('keydown', this.handleEscClose);\n    this.setState({\n      isEditProfilePopupOpen: false,\n      isAddPlacePopupOpen: false,\n      isEditAvatarPopupOpen: false,\n      isDeleteConfirmPopupOpen: false,\n      isImagePopupOpen: false,\n      selectedCard: undefined,\n    });\n  }\n\n /**\n  * @method handleEscClose\n  * @description Обработчик нажатия на клавишу Escape<br>\n  * Стрелочная функция, закрывает попап при нажатии клавиши Esc\n  * @param {Event} evt - событие \n  * @public\n  * @memberof App\n  * @instance\n  * @since v.2.0.0\n  */\n  handleEscClose = (evt) => {\n    if (evt.key === 'Escape') {\n      this.closeAllPopups();\n    }\n  }\n\n  /**\n   * @method handleClickOnOverlay\n   * @description Обработчик клика по оверлею<br>\n   * Стрелочная функция, закрывает попап при клике по оверлею\n   * @param {Event} evt - событие\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   */\n  handleClickOnOverlay = (evt) => {\n   /**\n     * Проверка истинности условия - клик по оверлею <br>\n     * Примечание: этот метод используется как обработчик в слушателе клика на оверлее попапа<br>\n     * Поэтому в данном случае условие проверяет совпадение клика именно на оверлее попапа\n     * @ignore\n     */\n    if (evt.target === evt.currentTarget) {\n      this.closeAllPopups();\n    }\n  }\n\n  /**\n   * @method handleCardLike\n   * @description Обработчик клика по иконке \"лайк\"<br>\n   * Стрелочная функция, принимает аргументом объект с данными карточки. \n   * Ставит или снимает \"лайки\", в зависимости от состояния \"лайка\".\n   * @param {Object} card - объект с данными лайкнутой карточки \n   * @param {String} card.id - id лайкнутой карточки\n   * @param {Array} card.likes - массив \"лайков\" лайкнутой карточки\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.2\n   */\n  handleCardLike = (card) => {\n    const isLiked = card.likes.some(likeOwner => likeOwner._id === this.state.currentUser._id);\n    api.changeLikeCardStatus(card.id, !isLiked)\n      .then(newCard => {\n        const newCards = this.state.cards.map(cardsItem => cardsItem.id === card.id\n          ? {\n            id: newCard._id,\n            link: newCard.link,\n            title: newCard.name,\n            likesQuantity: newCard.likes.length,\n            owner: newCard.owner,\n            likes: newCard.likes\n          }\n          : cardsItem);\n        this.setState({ cards: newCards });\n      })\n      .catch(err => { console.log(err); });\n  };\n\n /**\n  * @function handleCardClick\n  * @description Обработчик клика по изображению карточки<br>\n  * Стрелочная функция, открывает попап с полноразмерным изображением карточки, \n  * добавляет слушатель нажатия клавиши Esc\n  * @public\n  * @memberof App\n  * @instance\n  * @since v.2.0.0\n  */\n  handleCardClick = (card) => {\n    document.addEventListener('keydown', this.handleEscClose);\n    this.setState({ selectedCard: card });\n    this.setState({ isImagePopupOpen: true });\n  }\n\n  /**\n   * @method handleCardDelete\n   * @description Обработчик клика по иконке \"удалить\"<br>\n   * Стрелочная функция, принимает аргументом объект с данными карточки и сохраняет его в стейт. \n   * Открывает попап подтверждения удаления карточки\n   * @param {Object} card - объект с данными удаляемой карточки\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.4\n   */\n  handleCardDelete = (card) => {\n    this.setState({ isDeleteConfirmPopupOpen: true });\n    this.setState({ selectedCard: card });\n  };\n\n  /**\n   * @function handleDeleteConfirm\n   * @description Обработчик подтверждения удаления карточки (сабмит попапа подтверждения удаления)<br>\n   * Стрелочная функция, удаляет карточку.\n   * @param {Event} evt - событие, принимается для отмены стандартного поведения формы при сабмите\n   * @memberof App\n   * @instance\n   * @public\n   * @since v.2.0.4\n   */\n  handleDeleteConfirm = (evt) => {\n    evt.preventDefault();\n    const card = this.state.selectedCard;\n    this.setState({ isDeleteProcessing: true });\n\n    api.deleteCard(card.id)\n      .then(() => {\n        const newCards = this.state.cards.filter((cardsItem) => {\n          return cardsItem.id !== card.id\n        });\n        this.setState({ cards: newCards });\n        this.closeAllPopups();\n      })\n      .catch(err => { console.log(err); })\n      .finally(() => {\n        this.setState({ isDeleteProcessing: false });\n      });\n  }\n\n  /**\n   * @method handleEditAvatarClick\n   * @description Обработчик клика по аватару<br>\n   * Стрелочная функция, открывает попап редактирования аватара, добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   */\n  handleEditAvatarClick = () => {\n    document.activeElement.blur();\n    document.addEventListener('keydown', this.handleEscClose);\n    this.setState({ isEditAvatarPopupOpen: true });\n  }\n\n  /**\n   * @function handleUpdateAvatar\n   * @description Обработчик сабмита формы редактирования аватара<br>\n   * Изменяет аватар пользователя.<br>\n   * Стрелочная функция, принимает объект с новой ссылкой на аватар пользователя, \n   * возвращает объект с изменнуми данными пользователя\n   * @param {Object} Object - объект с новой ссылкой на аватар пользователя\n   * @param {String} Object.avatar - новая ссылка на аватар пользователя\n   * @memberof App\n   * @instance\n   * @public\n   * @since v.2.0.2\n   */\n  handleUpdateAvatar = ({ avatar }) => {\n    this.setState({ isNewAvatarLoading: true });\n    api.editAvatar(avatar)\n      .then(res => {\n        this.setState({ currentUser: res });\n        this.closeAllPopups();\n      })\n      .catch(err => { console.log(err); })\n      .finally(() => {\n        this.setState({ isNewAvatarLoading: false });\n      });\n  }\n\n  /**\n   * @method handleEditProfileClick\n   * @description Обработчик клика по кнопке \"Редактировать профиль\"<br>\n   * Стрелочная функция, открывает попап редактирования профиля, добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   */\n  handleEditProfileClick = () => {\n    document.activeElement.blur();\n    document.addEventListener('keydown', this.handleEscClose);\n    this.setState({ isEditProfilePopupOpen: true });\n  }\n\n  /**\n   * @function handleUpdateUser\n   * @description Обработчик сабмита формы редактирования профиля<br>\n   * Редактирует профиль пользователя.<br>\n   * Стрелочная функция, принимает объект с новыми данными профиля пользователя, \n   * возвращает объект с измененными данными профиля пользователя\n   * @param {Object} Object - объект с новыми данными профиля пользователя\n   * @param {String} Object.name - новое имя пользователя\n   * @param {String} Object.about - новое описание пользователя\n   * @memberof App\n   * @instance\n   * @public\n   * @since v.2.0.2\n   */\n  handleUpdateUser = ({ name, about }) => {\n    this.setState({ isNewProfileLoading: true });\n\n    api.editProfile({ name, about })\n      .then(res => {\n        this.setState({ currentUser: res });\n        this.closeAllPopups();\n      })\n      .catch(err => { console.log(err); })\n      .finally(() => {\n        this.setState({ isNewProfileLoading: false });\n      });\n  }\n\n  /**\n   * @method handleAddPlaceClick\n   * @description Обработчик клика по кнопке \"Добавить фото\"<br>\n   * Стрелочная функция, открывает попап добавления новой карточки, добавляет слушатель нажатия клавиши Esc\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.0\n   */\n  handleAddPlaceClick = () => {\n    document.activeElement.blur();\n    document.addEventListener('keydown', this.handleEscClose);\n    this.setState({ isAddPlacePopupOpen: true });\n  }\n\n  /**\n   * @method handleAddPlaceSubmit\n   * @description Обработчик сабмита формы добавления новой карточки<br>\n   * Стрелочная функция, принимает аргументом объект с данными для создания карточки, \n   * возвращает карточку, полученную с сервера\n   * @param {Object} Object - объект с данными для создания карточки\n   * @param {String} Object.name - название карточки\n   * @param {String} Object.link - ссылка на изображение карточки\n   * @returns {Object} - объект с данными карточки, полученный от сервера\n   * @public\n   * @memberof App\n   * @instance\n   * @since v.2.0.2\n   */\n  handleAddPlaceSubmit = ({ name, link }) => {\n    this.setState({ isNewCardLoading: true });\n\n    api.addNewCard({ name, link })\n      .then((newCard) => {\n        const obtainedCard = {\n          id: newCard._id,\n          link: newCard.link,\n          title: newCard.name,\n          likesQuantity: newCard.likes.length,\n          owner: newCard.owner,\n          likes: newCard.likes\n        };\n        const resultCardsArr = this.state.cards.concat(obtainedCard);\n        this.setState({ cards: resultCardsArr });\n        this.closeAllPopups();\n      })\n      .catch(err => { console.log(err); })\n      .finally(() => {\n        this.setState({ isNewCardLoading: false });\n      });\n  }\n\n  /**\n   * При монтировании компонента загружаем с сервера актуальные данные профиля пользователя\n   * и карточки\n   * @ignore\n   */\n  componentDidMount() {\n    Promise.all([api.loadUserData(), api.loadCards()])\n      .then(([currentUserData, initialCardsData]) => {\n        this.setState({ currentUser: currentUserData });\n        /**\n         * @description массив объектов с деструктурированными данными карточек\n         * @param {Object} initialCardsData - массив объектов с данными карточек, полученный \n         * после успешного запроса на сервер\n         * @constant {Object} initialCards - новый массив объектов с данными карточек\n         * @property {String} initialCards.id - уникальный id карточки\n         * @property {String} initialCards.link - ссылка на изображение карточки\n         * @property {String} initialCards.title - название карточки\n         * @property {Number} initialCards.likesQuantity - число, количество лайков у карточки\n         * @property {Object} initialCards.owner - объект, данные о владельце карточки\n         * @property {Array} initialCards.likes - массив, содержит id всех пользователей, лайкнувших карточку\n         * @ignore\n         */\n        const initialCards = initialCardsData.map((initialCard) => ({\n          id: initialCard._id,\n          link: initialCard.link,\n          title: initialCard.name,\n          likesQuantity: initialCard.likes.length,\n          owner: initialCard.owner,\n          likes: initialCard.likes\n        }));\n        this.setState({ cards: initialCards });\n      })\n      .catch(err => { console.log(err); });\n  };\n\n  /**\n   * @method render\n   * @description Публичный метод<br>\n   * Отрисовывает основные компоненты приложения.\n   * @public\n   * @instance\n   * @memberof App\n   * @since v.2.0.0\n   * @this App\n   */\n  render() {\n    return (\n      <>\n        <CurrentUserContext.Provider value={ this.state.currentUser }>\n          <Header />\n\n          <Main\n            onEditProfile={ this.handleEditProfileClick }\n            onAddPlace={ this.handleAddPlaceClick }\n            onEditAvatar={ this.handleEditAvatarClick }\n            onCardClick={ this.handleCardClick }\n            onCardLike={ this.handleCardLike }\n            onCardDelete={ this.handleCardDelete }\n            cards={ this.state.cards }\n          />\n\n          <Footer />\n\n          <EditProfilePopup\n            isOpen={ this.state.isEditProfilePopupOpen }\n            onClose={ this.closeAllPopups }\n            onOverlayClick={ this.handleClickOnOverlay }\n            onUpdateUser={ this.handleUpdateUser }\n            isLoading={ this.state.isNewProfileLoading }\n          />\n\n          <EditAvatarPopup\n            isOpen={ this.state.isEditAvatarPopupOpen }\n            onClose={ this.closeAllPopups }\n            onOverlayClick={ this.handleClickOnOverlay }\n            onUpdateAvatar={ this.handleUpdateAvatar }\n            isLoading={ this.state.isNewAvatarLoading }\n          />\n\n          <AddPlacePopup\n            isOpen={ this.state.isAddPlacePopupOpen }\n            onClose={ this.closeAllPopups }\n            onOverlayClick={ this.handleClickOnOverlay }\n            onSubmit={ this.handleAddPlaceSubmit }\n            isLoading={ this.state.isNewCardLoading }\n          />\n\n          <DeleteConfirmPopup\n            isOpen={ this.state.isDeleteConfirmPopupOpen }\n            onClose={ this.closeAllPopups }\n            onOverlayClick={ this.handleClickOnOverlay }\n            onSubmit={ this.handleDeleteConfirm }\n            isProcessing={ this.state.isDeleteProcessing }\n          />\n\n          <ImagePopup\n            card={ this.state.selectedCard }\n            onClose={ this.closeAllPopups }\n            onOverlayClick={ this.handleClickOnOverlay }\n            isOpen={ this.state.isImagePopupOpen }\n          />\n        </CurrentUserContext.Provider>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n/**\n * @module index\n * @description Файл index.js - точка входа для всего приложения<br>\n * Метод ReactDOM.render() - отрисовывает главный компонент приложения App в DOM\n */\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}